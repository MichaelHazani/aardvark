Gadget library
* List of gadget URIs

hook could be:
* left hand/right hand
* a grabber on a gadget
* an anchor point on another gadget
* transform relative to the stage?

/user/hand/left
/user/hand/right
/gadget/charm_bracelet_left/slota
/gadget/hand/right/grabbera

anchors
animation
inventories/catalogs
persistence
npm module for aardvark classes
npm tool for creating aardvark apps
make it work in release
figure out how to get command line options into the renderer. Maybe init it whena function is called?

========= DEAL WITH THIS NEXT ===========

* Fix dynamic reload of renderer tab. This should tear down the whole renderer and recreate it. Not having this is a pain when there are code changes on the Javascript side.

* Plumbing is there for grabbables to do something other than move themselves. Rough plan is:
  grabbable returns data that means "switch grab to gadget X when it's available"
  Grabbable returns a proxy object? Or maybe grabber does this?  Maybe the model in the manifest?
  When gadget X starts up it's inital hook is the grabber instead of a hand or whatever.
  Drop doesn't change. Might need to add drop in world for this to work.

Will also need a gadget that's a list of potential gadgets, each of which is grabbable.




========= DEAL WITH THIS NEXT ===========



Step 1 - Make some pixels from C++ on screen (done)
Step 2 - Make the pixels appear in a scene app (done)
Step 3 - Make some pixels from Javascript (done)
Step 4 - Make a quad from Javascript (done)
Step 5 - Make input work back to Javascript/HTML/CSS (done)
Step 6 - Haptics from panels (and pokers?) (done)
Step 7 - Grabbables and grabbers (done)
Step 8 - Building a gadget from a URI (done)
Step 9 - Hooks on gadgets

Step 10 - Spawning gadgets from a gadget - Launcher permission?

Step 50 - Make the pixels/input layer on top of other scene apps


future:
* Show frame info in the UI?
* Maybe switch to named pipes?


========= DEAL WITH THIS NEXT ===========

* avrenderer is crashing on exit after starting a gadget from a gadget seed.

=========================================

* Fix dynamic reload of renderer tab. This should tear down the whole renderer and recreate it. Not having this is a pain when there are code changes on the Javascript side.

* Need a way to keep a node alive, but hide it. Charm bracelet needs this when it's being dragged.
* Need to not let a hook keep being dropped on. Maybe they need an occupied flag?
* Probably need to make things on hooks not trivially grabbable. Maybe a global mode? Maybe a timer or something like that?
* panel textures appear to be wrapping instead of clamping. Seeing a little of the scrollbar on the left edge of the control panel.


working on animations and moving transform math to C++
* I have a CTransform class that can be one of null (i.e. just use the parent), origin (set an origin path), matrix, or TRS.
* Need to write tests for that an implement the manager for them.
* Need to hook up animation:
  * When a transform changes from one type to another it transitions immediately
  * all other transitions take the transition time to happen (which default to 0/immediate.) This means other types are going to need to keep track of from and to values, as well as the current interpolated value. 
  * If another new value is set while still transitioning, the interpolated value becomes the new start point.
  * every frame the manager is called with the animation time, and it goes and visits all the transforms
* Maybe use shared pointers for transforms for memory management? Javascript will hold some, C++ will hold some, etc.
* The idea is that only actual changes to the scene graph actually require a new traversal. Frame-to-frame transform changes, including animations, can be handled by C++ without calling back into JS to re-traverse

animation
inventories/catalogs
persistence
npm module for aardvark classes
npm tool for creating aardvark apps
make it work in release
figure out how to get command line options into the renderer. Maybe init it whena function is called?



Step 1 - Make some pixels from C++ on screen (done)
Step 2 - Make the pixels appear in a scene app (done)
Step 3 - Make some pixels from Javascript (done)
Step 4 - Make a quad from Javascript (done)
Step 5 - Make input work back to Javascript/HTML/CSS (done)
Step 6 - Haptics from panels (and pokers?) (done)
Step 7 - Grabbables and grabbers (done)
Step 8 - Building a gadget from a URI (done)
Step 9 - Hooks on gadgets
Step 10 - Spawning gadgets from a gadget - Launcher permission?

Step 11 - bootstrapping from a list of gadgets
Step 12 - persistence of your current gadget set

Step 50 - Make the pixels/input layer on top of other scene apps


future:
* Show frame info in the UI?
* Maybe switch to named pipes?


Current:
* Let N clients connect to one server -- seems to be working
* Upgrade vulkan SDK to the latest (1.1.something)
* Use the new core external memory stuff in 1.1 to pull in the shared DXGI handles from CEF. Example using older NV extensions here: https://developer.nvidia.com/getting-vulkan-ready-vr
* Make panel node type pick the model automatically
* Add a function to set DXGI handle for the panel
* some kind of default lighting that isn't blue
* Show frame info in the UI?
* Maybe switch to named pipes?
* Clients hanging up should clear apps/SGs (for now the renderer cleans up apps on the way out.)

texture handles are being sent to the renderer
app name to get a handle from is being sent with the panel scene graph node

Need to make sure texture is actually rendering.
Need to write code to:
* turn the string reference into a DXGI handle
* Turn the DXGI handle into a Vulkan texture
* Use that vulkan texture to override the placeholder texture in the model itself

panel node is added on the client side. Need to add renderer for panels
texture is null when the scene graph is generated. Maybe have a "regen scene graph" function when the texture updates? Or maybe remember on the C++ side that we set a panel to this browser and do that automatically with a new API?


Step 1 - Make some pixels from C++ on screen (done)
Step 2 - Make the pixels appear in a scene app (done)
Step 3 - Make some pixels from Javascript (done)

Step 4 - Make a quad from Javascript
Step 5 - Make input work back to Javascript/HTML/CSS
Step 6 - Make the pixels/input layer on top of other apps



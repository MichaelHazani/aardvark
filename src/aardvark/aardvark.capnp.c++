// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: aardvark.capnp

#include "aardvark.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<117> b_dba3941be7c535bc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    188,  53, 197, 231,  27, 148, 163, 219,
     15,   0,   0,   0,   1,   0,   3,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 104,  97, 114, 101, 100,  84,
    101, 120, 116, 117, 114, 101,  73, 110,
    102, 111,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    209, 139, 166, 128,  22, 217, 143, 206,
      9,   0,   0,   0,  42,   0,   0,   0,
     10,  37, 249, 243, 118, 136, 237, 180,
      5,   0,   0,   0,  58,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     70, 111, 114, 109,  97, 116,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  96,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    209, 139, 166, 128,  22, 217, 143, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114, 109,  97, 116,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     10,  37, 249, 243, 118, 136, 237, 180,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 100, 116, 104,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104,  97, 114, 101, 100,  84, 101,
    120, 116, 117, 114, 101,  72,  97, 110,
    100, 108, 101,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 118, 101, 114, 116,  89,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dba3941be7c535bc = b_dba3941be7c535bc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dba3941be7c535bc[] = {
  &s_b4ed8876f3f9250a,
  &s_ce8fd91680a68bd1,
};
static const uint16_t m_dba3941be7c535bc[] = {1, 3, 5, 4, 0, 2};
static const uint16_t i_dba3941be7c535bc[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_dba3941be7c535bc = {
  0xdba3941be7c535bc, b_dba3941be7c535bc.words, 117, d_dba3941be7c535bc, m_dba3941be7c535bc,
  2, 6, i_dba3941be7c535bc, nullptr, nullptr, { &s_dba3941be7c535bc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_ce8fd91680a68bd1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209, 139, 166, 128,  22, 217, 143, 206,
     35,   0,   0,   0,   2,   0,   0,   0,
    188,  53, 197, 231,  27, 148, 163, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 104,  97, 114, 101, 100,  84,
    101, 120, 116, 117, 114, 101,  73, 110,
    102, 111,  46,  84, 121, 112, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
    100,  51, 100,  49,  49,  84, 101, 120,
    116, 117, 114, 101,  50,  68,   0,   0, }
};
::capnp::word const* const bp_ce8fd91680a68bd1 = b_ce8fd91680a68bd1.words;
#if !CAPNP_LITE
static const uint16_t m_ce8fd91680a68bd1[] = {1, 0};
const ::capnp::_::RawSchema s_ce8fd91680a68bd1 = {
  0xce8fd91680a68bd1, b_ce8fd91680a68bd1.words, 28, nullptr, m_ce8fd91680a68bd1,
  0, 2, nullptr, nullptr, nullptr, { &s_ce8fd91680a68bd1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_ce8fd91680a68bd1, ce8fd91680a68bd1);
static const ::capnp::_::AlignedData<30> b_b4ed8876f3f9250a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10,  37, 249, 243, 118, 136, 237, 180,
     35,   0,   0,   0,   2,   0,   0,   0,
    188,  53, 197, 231,  27, 148, 163, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 104,  97, 114, 101, 100,  84,
    101, 120, 116, 117, 114, 101,  73, 110,
    102, 111,  46,  70, 111, 114, 109,  97,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  56, 103,  56,  98,  56,  97,  56,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  56, 103,  56, 114,  56,  97,  56,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4ed8876f3f9250a = b_b4ed8876f3f9250a.words;
#if !CAPNP_LITE
static const uint16_t m_b4ed8876f3f9250a[] = {1, 0};
const ::capnp::_::RawSchema s_b4ed8876f3f9250a = {
  0xb4ed8876f3f9250a, b_b4ed8876f3f9250a.words, 30, nullptr, m_b4ed8876f3f9250a,
  0, 2, nullptr, nullptr, nullptr, { &s_b4ed8876f3f9250a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Format_b4ed8876f3f9250a, b4ed8876f3f9250a);
static const ::capnp::_::AlignedData<62> b_cc0f1792d149c313 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 195,  73, 209, 146,  23,  15, 204,
     15,   0,   0,   0,   1,   0,   2,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  86, 101,  99, 116, 111, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc0f1792d149c313 = b_cc0f1792d149c313.words;
#if !CAPNP_LITE
static const uint16_t m_cc0f1792d149c313[] = {0, 1, 2};
static const uint16_t i_cc0f1792d149c313[] = {0, 1, 2};
const ::capnp::_::RawSchema s_cc0f1792d149c313 = {
  0xcc0f1792d149c313, b_cc0f1792d149c313.words, 62, nullptr, m_cc0f1792d149c313,
  0, 3, i_cc0f1792d149c313, nullptr, nullptr, { &s_cc0f1792d149c313, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_e8ffa9a9709eb047 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71, 176, 158, 112, 169, 169, 255, 232,
     15,   0,   0,   0,   1,   0,   2,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  67, 111, 108, 111, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    114,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ffa9a9709eb047 = b_e8ffa9a9709eb047.words;
#if !CAPNP_LITE
static const uint16_t m_e8ffa9a9709eb047[] = {3, 2, 1, 0};
static const uint16_t i_e8ffa9a9709eb047[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e8ffa9a9709eb047 = {
  0xe8ffa9a9709eb047, b_e8ffa9a9709eb047.words, 77, nullptr, m_e8ffa9a9709eb047,
  0, 4, i_e8ffa9a9709eb047, nullptr, nullptr, { &s_e8ffa9a9709eb047, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<78> b_b02007dd270cc5c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201, 197,  12,  39, 221,   7,  32, 176,
     15,   0,   0,   0,   1,   0,   2,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  81, 117,  97, 116, 101, 114, 110,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b02007dd270cc5c9 = b_b02007dd270cc5c9.words;
#if !CAPNP_LITE
static const uint16_t m_b02007dd270cc5c9[] = {3, 0, 1, 2};
static const uint16_t i_b02007dd270cc5c9[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b02007dd270cc5c9 = {
  0xb02007dd270cc5c9, b_b02007dd270cc5c9.words, 78, nullptr, m_b02007dd270cc5c9,
  0, 4, i_b02007dd270cc5c9, nullptr, nullptr, { &s_b02007dd270cc5c9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_9899eaba8cbdf2c0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    192, 242, 189, 140, 186, 234, 153, 152,
     15,   0,   0,   0,   1,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  84, 114,  97, 110, 115, 102, 111,
    114, 109,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115, 105, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 195,  73, 209, 146,  23,  15, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 116,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    201, 197,  12,  39, 221,   7,  32, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99,  97, 108, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 195,  73, 209, 146,  23,  15, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9899eaba8cbdf2c0 = b_9899eaba8cbdf2c0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9899eaba8cbdf2c0[] = {
  &s_b02007dd270cc5c9,
  &s_cc0f1792d149c313,
};
static const uint16_t m_9899eaba8cbdf2c0[] = {0, 1, 2};
static const uint16_t i_9899eaba8cbdf2c0[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9899eaba8cbdf2c0 = {
  0x9899eaba8cbdf2c0, b_9899eaba8cbdf2c0.words, 65, d_9899eaba8cbdf2c0, m_9899eaba8cbdf2c0,
  2, 3, i_9899eaba8cbdf2c0, nullptr, nullptr, { &s_9899eaba8cbdf2c0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_bb67002f6c8e6813 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 104, 142, 108,  47,   0, 103, 187,
     15,   0,   0,   0,   1,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  76, 105, 103, 104, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    116, 114,  97, 110, 115, 102, 111, 114,
    109,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    192, 242, 189, 140, 186, 234, 153, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 102, 102, 117, 115, 101,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     71, 176, 158, 112, 169, 169, 255, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb67002f6c8e6813 = b_bb67002f6c8e6813.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb67002f6c8e6813[] = {
  &s_9899eaba8cbdf2c0,
  &s_e8ffa9a9709eb047,
};
static const uint16_t m_bb67002f6c8e6813[] = {1, 0};
static const uint16_t i_bb67002f6c8e6813[] = {0, 1};
const ::capnp::_::RawSchema s_bb67002f6c8e6813 = {
  0xbb67002f6c8e6813, b_bb67002f6c8e6813.words, 48, d_bb67002f6c8e6813, m_bb67002f6c8e6813,
  2, 2, i_bb67002f6c8e6813, nullptr, nullptr, { &s_bb67002f6c8e6813, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_f2cfde5589c790d1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209, 144, 199, 137,  85, 222, 207, 242,
     15,   0,   0,   0,   1,   0,   1,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  84,
    101, 120, 116, 117, 114, 101,  73, 110,
    102, 111,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    103,  97, 100, 103, 101, 116,  78,  97,
    109, 101,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104,  97, 114, 101, 100,  84, 101,
    120, 116, 117, 114, 101,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    188,  53, 197, 231,  27, 148, 163, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2cfde5589c790d1 = b_f2cfde5589c790d1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2cfde5589c790d1[] = {
  &s_dba3941be7c535bc,
};
static const uint16_t m_f2cfde5589c790d1[] = {1, 0, 2};
static const uint16_t i_f2cfde5589c790d1[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f2cfde5589c790d1 = {
  0xf2cfde5589c790d1, b_f2cfde5589c790d1.words, 68, d_f2cfde5589c790d1, m_f2cfde5589c790d1,
  1, 3, i_f2cfde5589c790d1, nullptr, nullptr, { &s_f2cfde5589c790d1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<72> b_c63d22eedfe945e3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227,  69, 233, 223, 238,  34,  61, 198,
     15,   0,   0,   0,   1,   0,   1,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  86, 105, 115, 117,  97, 108,  70,
    114,  97, 109, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 111, 116, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    164, 174, 167,  10, 180, 171, 233, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  84, 101,
    120, 116, 117, 114, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    209, 144, 199, 137,  85, 222, 207, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c63d22eedfe945e3 = b_c63d22eedfe945e3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c63d22eedfe945e3[] = {
  &s_cfe9abb40aa7aea4,
  &s_f2cfde5589c790d1,
};
static const uint16_t m_c63d22eedfe945e3[] = {2, 0, 1};
static const uint16_t i_c63d22eedfe945e3[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c63d22eedfe945e3 = {
  0xc63d22eedfe945e3, b_c63d22eedfe945e3.words, 72, d_c63d22eedfe945e3, m_c63d22eedfe945e3,
  2, 3, i_c63d22eedfe945e3, nullptr, nullptr, { &s_c63d22eedfe945e3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_8015c5a053ba10f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  16, 186,  83, 160, 197,  21, 128,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   0,   0,   0,
    161,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,  19,  90, 139, 173, 199,  15, 203,
    116,  55, 165, 138,   9, 209, 126, 203,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    109, 177, 235, 224, 250,  52, 186, 139,
    148,  66, 102, 125, 232, 121,   1, 225,
     61,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    126, 222, 241,  88, 172, 146,  97, 147,
    139, 100, 227,  28,  62, 114, 170, 220,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 119,  70, 114,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 110, 100,  72,  97, 112, 116,
    105,  99,  69, 118, 101, 110, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 114,  97,  98,  69, 118, 101, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8015c5a053ba10f7 = b_8015c5a053ba10f7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8015c5a053ba10f7[] = {
  &s_8bba34fae0ebb16d,
  &s_936192ac58f1de7e,
  &s_cb0fc7ad8b5a13e0,
  &s_cb7ed1098aa53774,
  &s_dcaa723e1ce3648b,
  &s_e10179e87d664294,
};
static const uint16_t m_8015c5a053ba10f7[] = {2, 0, 1};
const ::capnp::_::RawSchema s_8015c5a053ba10f7 = {
  0x8015c5a053ba10f7, b_8015c5a053ba10f7.words, 52, d_8015c5a053ba10f7, m_8015c5a053ba10f7,
  6, 3, nullptr, nullptr, nullptr, { &s_8015c5a053ba10f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cb0fc7ad8b5a13e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224,  19,  90, 139, 173, 199,  15, 203,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 110,
    101, 119,  70, 114,  97, 109, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 114,  97, 109, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    227,  69, 233, 223, 238,  34,  61, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb0fc7ad8b5a13e0 = b_cb0fc7ad8b5a13e0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb0fc7ad8b5a13e0[] = {
  &s_c63d22eedfe945e3,
};
static const uint16_t m_cb0fc7ad8b5a13e0[] = {0};
static const uint16_t i_cb0fc7ad8b5a13e0[] = {0};
const ::capnp::_::RawSchema s_cb0fc7ad8b5a13e0 = {
  0xcb0fc7ad8b5a13e0, b_cb0fc7ad8b5a13e0.words, 34, d_cb0fc7ad8b5a13e0, m_cb0fc7ad8b5a13e0,
  1, 1, i_cb0fc7ad8b5a13e0, nullptr, nullptr, { &s_cb0fc7ad8b5a13e0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_cb7ed1098aa53774 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  55, 165, 138,   9, 209, 126, 203,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 110,
    101, 119,  70, 114,  97, 109, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_cb7ed1098aa53774 = b_cb7ed1098aa53774.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cb7ed1098aa53774 = {
  0xcb7ed1098aa53774, b_cb7ed1098aa53774.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cb7ed1098aa53774, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_8bba34fae0ebb16d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109, 177, 235, 224, 250,  52, 186, 139,
     31,   0,   0,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 115,
    101, 110, 100,  72,  97, 112, 116, 105,
     99,  69, 118, 101, 110, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 114, 103, 101, 116,  71, 108,
    111,  98,  97, 108,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 109, 112, 108, 105, 116, 117, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 101, 113, 117, 101, 110,  99,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 117, 114,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8bba34fae0ebb16d = b_8bba34fae0ebb16d.words;
#if !CAPNP_LITE
static const uint16_t m_8bba34fae0ebb16d[] = {1, 3, 2, 0};
static const uint16_t i_8bba34fae0ebb16d[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_8bba34fae0ebb16d = {
  0x8bba34fae0ebb16d, b_8bba34fae0ebb16d.words, 84, nullptr, m_8bba34fae0ebb16d,
  0, 4, i_8bba34fae0ebb16d, nullptr, nullptr, { &s_8bba34fae0ebb16d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e10179e87d664294 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,  66, 102, 125, 232, 121,   1, 225,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 115,
    101, 110, 100,  72,  97, 112, 116, 105,
     99,  69, 118, 101, 110, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_e10179e87d664294 = b_e10179e87d664294.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e10179e87d664294 = {
  0xe10179e87d664294, b_e10179e87d664294.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e10179e87d664294, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_936192ac58f1de7e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126, 222, 241,  88, 172, 146,  97, 147,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 103,
    114,  97,  98,  69, 118, 101, 110, 116,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     84, 130, 185,  26, 183,  77,   7, 129,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_936192ac58f1de7e = b_936192ac58f1de7e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_936192ac58f1de7e[] = {
  &s_81074db71ab98254,
};
static const uint16_t m_936192ac58f1de7e[] = {0};
static const uint16_t i_936192ac58f1de7e[] = {0};
const ::capnp::_::RawSchema s_936192ac58f1de7e = {
  0x936192ac58f1de7e, b_936192ac58f1de7e.words, 34, d_936192ac58f1de7e, m_936192ac58f1de7e,
  1, 1, i_936192ac58f1de7e, nullptr, nullptr, { &s_936192ac58f1de7e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_dcaa723e1ce3648b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139, 100, 227,  28,  62, 114, 170, 220,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  70, 114,  97, 109, 101,  76, 105,
    115, 116, 101, 110, 101, 114,  46, 103,
    114,  97,  98,  69, 118, 101, 110, 116,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dcaa723e1ce3648b = b_dcaa723e1ce3648b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dcaa723e1ce3648b = {
  0xdcaa723e1ce3648b, b_dcaa723e1ce3648b.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dcaa723e1ce3648b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<79> b_af5b8ea815d4c48a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138, 196, 212,  21, 168, 142,  91, 175,
     15,   0,   0,   0,   1,   0,   3,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  80, 114,
    111, 120, 105, 109, 105, 116, 121,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 110, 101, 108,  73, 100,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af5b8ea815d4c48a = b_af5b8ea815d4c48a.words;
#if !CAPNP_LITE
static const uint16_t m_af5b8ea815d4c48a[] = {3, 0, 1, 2};
static const uint16_t i_af5b8ea815d4c48a[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_af5b8ea815d4c48a = {
  0xaf5b8ea815d4c48a, b_af5b8ea815d4c48a.words, 79, nullptr, m_af5b8ea815d4c48a,
  0, 4, i_af5b8ea815d4c48a, nullptr, nullptr, { &s_af5b8ea815d4c48a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_e6824aebf526d4e8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232, 212,  38, 245, 235,  74, 130, 230,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80, 111, 107, 101, 114,  80, 114,
    111,  99, 101, 115, 115, 111, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    146,   4,  78, 126, 210, 150,  81, 234,
    109, 162, 126,  69, 248, 155, 118, 171,
     17,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    117, 112, 100,  97, 116, 101,  80,  97,
    110, 101, 108,  80, 114, 111, 120, 105,
    109, 105, 116, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e6824aebf526d4e8 = b_e6824aebf526d4e8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e6824aebf526d4e8[] = {
  &s_ab769bf8457ea26d,
  &s_ea5196d27e4e0492,
};
static const uint16_t m_e6824aebf526d4e8[] = {0};
const ::capnp::_::RawSchema s_e6824aebf526d4e8 = {
  0xe6824aebf526d4e8, b_e6824aebf526d4e8.words, 31, d_e6824aebf526d4e8, m_e6824aebf526d4e8,
  2, 1, nullptr, nullptr, nullptr, { &s_e6824aebf526d4e8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_ea5196d27e4e0492 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146,   4,  78, 126, 210, 150,  81, 234,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80, 111, 107, 101, 114,  80, 114,
    111,  99, 101, 115, 115, 111, 114,  46,
    117, 112, 100,  97, 116, 101,  80,  97,
    110, 101, 108,  80, 114, 111, 120, 105,
    109, 105, 116, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 107, 101, 114,  73, 100,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 120, 105, 109, 105, 116,
    121,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    138, 196, 212,  21, 168, 142,  91, 175,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea5196d27e4e0492 = b_ea5196d27e4e0492.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea5196d27e4e0492[] = {
  &s_af5b8ea815d4c48a,
};
static const uint16_t m_ea5196d27e4e0492[] = {0, 1};
static const uint16_t i_ea5196d27e4e0492[] = {0, 1};
const ::capnp::_::RawSchema s_ea5196d27e4e0492 = {
  0xea5196d27e4e0492, b_ea5196d27e4e0492.words, 56, d_ea5196d27e4e0492, m_ea5196d27e4e0492,
  1, 2, i_ea5196d27e4e0492, nullptr, nullptr, { &s_ea5196d27e4e0492, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ab769bf8457ea26d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109, 162, 126,  69, 248, 155, 118, 171,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80, 111, 107, 101, 114,  80, 114,
    111,  99, 101, 115, 115, 111, 114,  46,
    117, 112, 100,  97, 116, 101,  80,  97,
    110, 101, 108,  80, 114, 111, 120, 105,
    109, 105, 116, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ab769bf8457ea26d = b_ab769bf8457ea26d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ab769bf8457ea26d = {
  0xab769bf8457ea26d, b_ab769bf8457ea26d.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ab769bf8457ea26d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<97> b_e865e502fce885ec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 133, 232, 252,   2, 229, 101, 232,
     15,   0,   0,   0,   1,   0,   4,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  77, 111,
    117, 115, 101,  69, 118, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    208, 210,  17,  45, 178, 229,  13, 230,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    208, 210,  17,  45, 178, 229,  13, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 110, 101, 108,  73, 100,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 107, 101, 114,  73, 100,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e865e502fce885ec = b_e865e502fce885ec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e865e502fce885ec[] = {
  &s_e60de5b22d11d2d0,
};
static const uint16_t m_e865e502fce885ec[] = {1, 2, 0, 3, 4};
static const uint16_t i_e865e502fce885ec[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_e865e502fce885ec = {
  0xe865e502fce885ec, b_e865e502fce885ec.words, 97, d_e865e502fce885ec, m_e865e502fce885ec,
  1, 5, i_e865e502fce885ec, nullptr, nullptr, { &s_e865e502fce885ec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_e60de5b22d11d2d0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208, 210,  17,  45, 178, 229,  13, 230,
     33,   0,   0,   0,   2,   0,   0,   0,
    236, 133, 232, 252,   2, 229, 101, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 127,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  77, 111,
    117, 115, 101,  69, 118, 101, 110, 116,
     46,  84, 121, 112, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 111, 119, 110,   0,   0,   0,   0,
    117, 112,   0,   0,   0,   0,   0,   0,
    101, 110, 116, 101, 114,   0,   0,   0,
    108, 101,  97, 118, 101,   0,   0,   0,
    109, 111, 118, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e60de5b22d11d2d0 = b_e60de5b22d11d2d0.words;
#if !CAPNP_LITE
static const uint16_t m_e60de5b22d11d2d0[] = {0, 2, 3, 4, 1};
const ::capnp::_::RawSchema s_e60de5b22d11d2d0 = {
  0xe60de5b22d11d2d0, b_e60de5b22d11d2d0.words, 39, nullptr, m_e60de5b22d11d2d0,
  0, 5, nullptr, nullptr, nullptr, { &s_e60de5b22d11d2d0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_e60de5b22d11d2d0, e60de5b22d11d2d0);
static const ::capnp::_::AlignedData<30> b_e829b4bc9d70eb7e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126, 235, 112, 157, 188, 180,  41, 232,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  80, 114,
    111,  99, 101, 115, 115, 111, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,  59, 229, 206, 180, 151, 254, 205,
    186, 131, 110, 231,  78, 232, 210, 255,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    109, 111, 117, 115, 101,  69, 118, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e829b4bc9d70eb7e = b_e829b4bc9d70eb7e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e829b4bc9d70eb7e[] = {
  &s_cdfe97b4cee53bb9,
  &s_ffd2e84ee76e83ba,
};
static const uint16_t m_e829b4bc9d70eb7e[] = {0};
const ::capnp::_::RawSchema s_e829b4bc9d70eb7e = {
  0xe829b4bc9d70eb7e, b_e829b4bc9d70eb7e.words, 30, d_e829b4bc9d70eb7e, m_e829b4bc9d70eb7e,
  2, 1, nullptr, nullptr, nullptr, { &s_e829b4bc9d70eb7e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cdfe97b4cee53bb9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    185,  59, 229, 206, 180, 151, 254, 205,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  80, 114,
    111,  99, 101, 115, 115, 111, 114,  46,
    109, 111, 117, 115, 101,  69, 118, 101,
    110, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 110, 101, 108,  73, 100,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236, 133, 232, 252,   2, 229, 101, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdfe97b4cee53bb9 = b_cdfe97b4cee53bb9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdfe97b4cee53bb9[] = {
  &s_e865e502fce885ec,
};
static const uint16_t m_cdfe97b4cee53bb9[] = {1, 0};
static const uint16_t i_cdfe97b4cee53bb9[] = {0, 1};
const ::capnp::_::RawSchema s_cdfe97b4cee53bb9 = {
  0xcdfe97b4cee53bb9, b_cdfe97b4cee53bb9.words, 50, d_cdfe97b4cee53bb9, m_cdfe97b4cee53bb9,
  1, 2, i_cdfe97b4cee53bb9, nullptr, nullptr, { &s_cdfe97b4cee53bb9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_ffd2e84ee76e83ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 131, 110, 231,  78, 232, 210, 255,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  80,  97, 110, 101, 108,  80, 114,
    111,  99, 101, 115, 115, 111, 114,  46,
    109, 111, 117, 115, 101,  69, 118, 101,
    110, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ffd2e84ee76e83ba = b_ffd2e84ee76e83ba.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ffd2e84ee76e83ba = {
  0xffd2e84ee76e83ba, b_ffd2e84ee76e83ba.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ffd2e84ee76e83ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ff3efec28716255a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     90,  37,  22, 135, 194, 254,  62, 255,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98, 101, 114,
     80, 114, 111,  99, 101, 115, 115, 111,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  97,  54, 213, 151, 134,  38, 218,
     36, 215,  93, 198,  20, 178, 145, 238,
     17,   0,   0,   0, 218,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    117, 112, 100,  97, 116, 101,  71, 114,
     97,  98,  98, 101, 114,  73, 110, 116,
    101, 114, 115, 101,  99, 116, 105, 111,
    110, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ff3efec28716255a = b_ff3efec28716255a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff3efec28716255a[] = {
  &s_da268697d5366153,
  &s_ee91b214c65dd724,
};
static const uint16_t m_ff3efec28716255a[] = {0};
const ::capnp::_::RawSchema s_ff3efec28716255a = {
  0xff3efec28716255a, b_ff3efec28716255a.words, 33, d_ff3efec28716255a, m_ff3efec28716255a,
  2, 1, nullptr, nullptr, nullptr, { &s_ff3efec28716255a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<93> b_da268697d5366153 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83,  97,  54, 213, 151, 134,  38, 218,
     34,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98, 101, 114,
     80, 114, 111,  99, 101, 115, 115, 111,
    114,  46, 117, 112, 100,  97, 116, 101,
     71, 114,  97,  98,  98, 101, 114,  73,
    110, 116, 101, 114, 115, 101,  99, 116,
    105, 111, 110, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97,  98,  98, 101, 114,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97,  98,  80, 114, 101, 115,
    115, 101, 100,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 115, 101,  99,
    116, 105, 111, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da268697d5366153 = b_da268697d5366153.words;
#if !CAPNP_LITE
static const uint16_t m_da268697d5366153[] = {1, 0, 3, 2};
static const uint16_t i_da268697d5366153[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_da268697d5366153 = {
  0xda268697d5366153, b_da268697d5366153.words, 93, nullptr, m_da268697d5366153,
  0, 4, i_da268697d5366153, nullptr, nullptr, { &s_da268697d5366153, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_ee91b214c65dd724 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 215,  93, 198,  20, 178, 145, 238,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98, 101, 114,
     80, 114, 111,  99, 101, 115, 115, 111,
    114,  46, 117, 112, 100,  97, 116, 101,
     71, 114,  97,  98,  98, 101, 114,  73,
    110, 116, 101, 114, 115, 101,  99, 116,
    105, 111, 110, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee91b214c65dd724 = b_ee91b214c65dd724.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ee91b214c65dd724 = {
  0xee91b214c65dd724, b_ee91b214c65dd724.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ee91b214c65dd724, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<99> b_81074db71ab98254 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 130, 185,  26, 183,  77,   7, 129,
     15,   0,   0,   0,   1,   0,   4,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  69, 118, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     26,  49, 205, 146, 189, 205, 204, 245,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     26,  49, 205, 146, 189, 205, 204, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97,  98,  98,  97,  98, 108,
    101,  73, 100,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97,  98,  98, 101, 114,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115, 102, 111, 114,
    109,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    192, 242, 189, 140, 186, 234, 153, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81074db71ab98254 = b_81074db71ab98254.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_81074db71ab98254[] = {
  &s_9899eaba8cbdf2c0,
  &s_f5cccdbd92cd311a,
};
static const uint16_t m_81074db71ab98254[] = {1, 2, 3, 4, 0};
static const uint16_t i_81074db71ab98254[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_81074db71ab98254 = {
  0x81074db71ab98254, b_81074db71ab98254.words, 99, d_81074db71ab98254, m_81074db71ab98254,
  2, 5, i_81074db71ab98254, nullptr, nullptr, { &s_81074db71ab98254, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_f5cccdbd92cd311a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     26,  49, 205, 146, 189, 205, 204, 245,
     27,   0,   0,   0,   2,   0,   0,   0,
     84, 130, 185,  26, 183,  77,   7, 129,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  69, 118, 101,
    110, 116,  46,  84, 121, 112, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
    101, 110, 116, 101, 114,  82,  97, 110,
    103, 101,   0,   0,   0,   0,   0,   0,
    108, 101,  97, 118, 101,  82,  97, 110,
    103, 101,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116,  71, 114,  97,
     98,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,  71, 114,  97,  98,   0,
    101, 110, 116, 101, 114,  72, 111, 111,
    107,  82,  97, 110, 103, 101,   0,   0,
    108, 101,  97, 118, 101,  72, 111, 111,
    107,  82,  97, 110, 103, 101,   0,   0, }
};
::capnp::word const* const bp_f5cccdbd92cd311a = b_f5cccdbd92cd311a.words;
#if !CAPNP_LITE
static const uint16_t m_f5cccdbd92cd311a[] = {4, 5, 1, 0, 6, 2, 3};
const ::capnp::_::RawSchema s_f5cccdbd92cd311a = {
  0xf5cccdbd92cd311a, b_f5cccdbd92cd311a.words, 51, nullptr, m_f5cccdbd92cd311a,
  0, 7, nullptr, nullptr, nullptr, { &s_f5cccdbd92cd311a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_f5cccdbd92cd311a, f5cccdbd92cd311a);
static const ::capnp::_::AlignedData<31> b_bb3e161d2679685d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 104, 121,  38,  29,  22,  62, 187,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98,  97,  98,
    108, 101,  80, 114, 111,  99, 101, 115,
    115, 111, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57, 138,  16, 245, 128, 202,  44, 225,
    207,  26, 213, 133, 144, 252, 199, 201,
     17,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103, 114,  97,  98,  69, 118, 101, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_bb3e161d2679685d = b_bb3e161d2679685d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb3e161d2679685d[] = {
  &s_c9c7fc9085d51acf,
  &s_e12cca80f5108a39,
};
static const uint16_t m_bb3e161d2679685d[] = {0};
const ::capnp::_::RawSchema s_bb3e161d2679685d = {
  0xbb3e161d2679685d, b_bb3e161d2679685d.words, 31, d_bb3e161d2679685d, m_bb3e161d2679685d,
  2, 1, nullptr, nullptr, nullptr, { &s_bb3e161d2679685d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_e12cca80f5108a39 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57, 138,  16, 245, 128, 202,  44, 225,
     36,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98,  97,  98,
    108, 101,  80, 114, 111,  99, 101, 115,
    115, 111, 114,  46, 103, 114,  97,  98,
     69, 118, 101, 110, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97,  98,  98,  97,  98, 108,
    101,  73, 100,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     84, 130, 185,  26, 183,  77,   7, 129,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e12cca80f5108a39 = b_e12cca80f5108a39.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e12cca80f5108a39[] = {
  &s_81074db71ab98254,
};
static const uint16_t m_e12cca80f5108a39[] = {1, 0};
static const uint16_t i_e12cca80f5108a39[] = {0, 1};
const ::capnp::_::RawSchema s_e12cca80f5108a39 = {
  0xe12cca80f5108a39, b_e12cca80f5108a39.words, 51, d_e12cca80f5108a39, m_e12cca80f5108a39,
  1, 2, i_e12cca80f5108a39, nullptr, nullptr, { &s_e12cca80f5108a39, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_c9c7fc9085d51acf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  26, 213, 133, 144, 252, 199, 201,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71, 114,  97,  98,  98,  97,  98,
    108, 101,  80, 114, 111,  99, 101, 115,
    115, 111, 114,  46, 103, 114,  97,  98,
     69, 118, 101, 110, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_c9c7fc9085d51acf = b_c9c7fc9085d51acf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c9c7fc9085d51acf = {
  0xc9c7fc9085d51acf, b_c9c7fc9085d51acf.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c9c7fc9085d51acf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_ff2e95d815609365 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 147,  96,  21, 216, 149,  46, 255,
     15,   0,   0,   0,   1,   0,   1,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  86, 111, 108, 117, 109, 101,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     95, 178,  54, 160, 122, 194, 115, 197,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     95, 178,  54, 160, 122, 194, 115, 197,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  97, 100, 105, 117, 115,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff2e95d815609365 = b_ff2e95d815609365.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff2e95d815609365[] = {
  &s_c573c27aa036b25f,
};
static const uint16_t m_ff2e95d815609365[] = {1, 0};
static const uint16_t i_ff2e95d815609365[] = {0, 1};
const ::capnp::_::RawSchema s_ff2e95d815609365 = {
  0xff2e95d815609365, b_ff2e95d815609365.words, 50, d_ff2e95d815609365, m_ff2e95d815609365,
  1, 2, i_ff2e95d815609365, nullptr, nullptr, { &s_ff2e95d815609365, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<26> b_c573c27aa036b25f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 178,  54, 160, 122, 194, 115, 197,
     24,   0,   0,   0,   2,   0,   0,   0,
    101, 147,  96,  21, 216, 149,  46, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  86, 111, 108, 117, 109, 101,  46,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
    115, 112, 104, 101, 114, 101,   0,   0, }
};
::capnp::word const* const bp_c573c27aa036b25f = b_c573c27aa036b25f.words;
#if !CAPNP_LITE
static const uint16_t m_c573c27aa036b25f[] = {0, 1};
const ::capnp::_::RawSchema s_c573c27aa036b25f = {
  0xc573c27aa036b25f, b_c573c27aa036b25f.words, 26, nullptr, m_c573c27aa036b25f,
  0, 2, nullptr, nullptr, nullptr, { &s_c573c27aa036b25f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_c573c27aa036b25f, c573c27aa036b25f);
static const ::capnp::_::AlignedData<214> b_cef52746090f960e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 150,  15,   9,  70,  39, 245, 206,
     15,   0,   0,   0,   1,   0,   2,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      8,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 167,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  78, 111, 100, 101,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    230,  44,  67,  46,  61,  40,  65, 217,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   1,   0,   0,   3,   0,   1,   0,
     72,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   1,   0,   0,   3,   0,   1,   0,
     76,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   1,   0,   0,   3,   0,   1,   0,
    100,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     97,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   1,   0,   0,   3,   0,   1,   0,
    104,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    101,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   1,   0,   0,   3,   0,   1,   0,
    108,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   1,   0,   0,   3,   0,   1,   0,
    116,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   1,   0,   0,   3,   0,   1,   0,
    124,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   1,   0,   0,   3,   0,   1,   0,
    132,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   1,   0,   0,   3,   0,   1,   0,
    144,   1,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,  48,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   1,   0,   0,   3,   0,   1,   0,
    152,   1,   0,   0,   2,   0,   1,   0,
     10,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   1,   0,   0,   3,   0,   1,   0,
    160,   1,   0,   0,   2,   0,   1,   0,
     11,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   1,   0,   0,   3,   0,   1,   0,
    172,   1,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 104, 105, 108, 100, 114, 101, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    230,  44,  67,  46,  61,  40,  65, 217,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  79, 114, 105, 103,
    105, 110,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  84, 114,  97, 110,
    115, 102, 111, 114, 109,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    192, 242, 189, 140, 186, 234, 153, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  77, 111, 100, 101,
    108,  85, 114, 105,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  84, 101, 120, 116,
    117, 114, 101,  83, 111, 117, 114,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  73, 110, 116, 101,
    114,  97,  99, 116, 105, 118, 101,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  86, 111, 108, 117,
    109, 101,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 147,  96,  21, 216, 149,  46, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112,  67, 117, 115, 116,
    111, 109,  78, 111, 100, 101,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cef52746090f960e = b_cef52746090f960e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cef52746090f960e[] = {
  &s_9899eaba8cbdf2c0,
  &s_d941283d2e432ce6,
  &s_ff2e95d815609365,
};
static const uint16_t m_cef52746090f960e[] = {2, 4, 0, 1, 11, 9, 7, 5, 8, 6, 10, 3};
static const uint16_t i_cef52746090f960e[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
const ::capnp::_::RawSchema s_cef52746090f960e = {
  0xcef52746090f960e, b_cef52746090f960e.words, 214, d_cef52746090f960e, m_cef52746090f960e,
  3, 12, i_cef52746090f960e, nullptr, nullptr, { &s_cef52746090f960e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_d941283d2e432ce6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  44,  67,  46,  61,  40,  65, 217,
     22,   0,   0,   0,   2,   0,   0,   0,
     14, 150,  15,   9,  70,  39, 245, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  15,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  78, 111, 100, 101,  46,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     44,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
    111, 114, 105, 103, 105, 110,   0,   0,
    116, 114,  97, 110, 115, 102, 111, 114,
    109,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 101, 108,   0,   0,   0,
    112,  97, 110, 101, 108,   0,   0,   0,
    112, 111, 107, 101, 114,   0,   0,   0,
    103, 114,  97,  98,  98,  97,  98, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
    103, 114,  97,  98,  98, 101, 114,   0,
     99, 117, 115, 116, 111, 109,   0,   0, }
};
::capnp::word const* const bp_d941283d2e432ce6 = b_d941283d2e432ce6.words;
#if !CAPNP_LITE
static const uint16_t m_d941283d2e432ce6[] = {1, 10, 7, 9, 8, 0, 4, 2, 5, 6, 3};
const ::capnp::_::RawSchema s_d941283d2e432ce6 = {
  0xd941283d2e432ce6, b_d941283d2e432ce6.words, 65, nullptr, m_d941283d2e432ce6,
  0, 11, nullptr, nullptr, nullptr, { &s_d941283d2e432ce6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_d941283d2e432ce6, d941283d2e432ce6);
static const ::capnp::_::AlignedData<33> b_f1e09ba70d4ac430 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48, 196,  74,  13, 167, 155, 224, 241,
     15,   0,   0,   0,   1,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  78, 111, 100, 101,  87, 114,  97,
    112, 112, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     14, 150,  15,   9,  70,  39, 245, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1e09ba70d4ac430 = b_f1e09ba70d4ac430.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f1e09ba70d4ac430[] = {
  &s_cef52746090f960e,
};
static const uint16_t m_f1e09ba70d4ac430[] = {0};
static const uint16_t i_f1e09ba70d4ac430[] = {0};
const ::capnp::_::RawSchema s_f1e09ba70d4ac430 = {
  0xf1e09ba70d4ac430, b_f1e09ba70d4ac430.words, 33, d_f1e09ba70d4ac430, m_f1e09ba70d4ac430,
  1, 1, i_f1e09ba70d4ac430, nullptr, nullptr, { &s_f1e09ba70d4ac430, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<134> b_cfe9abb40aa7aea4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    164, 174, 167,  10, 180, 171, 233, 207,
     15,   0,   0,   0,   1,   0,   1,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      6,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  78, 111, 100, 101,  82, 111, 111,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   0,   0,   0,   3,   0,   1,   0,
    240,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
    252,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    244,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     48, 196,  74,  13, 167, 155, 224, 241,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 117, 114,  99, 101,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 107, 101, 114,  80, 114, 111,
     99, 101, 115, 115, 111, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 212,  38, 245, 235,  74, 130, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 110, 101, 108,  80, 114, 111,
     99, 101, 115, 115, 111, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    126, 235, 112, 157, 188, 180,  41, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97,  98,  98, 101, 114,  80,
    114, 111,  99, 101, 115, 115, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     90,  37,  22, 135, 194, 254,  62, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114,  97,  98,  98,  97,  98, 108,
    101,  80, 114, 111,  99, 101, 115, 115,
    111, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     93, 104, 121,  38,  29,  22,  62, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfe9abb40aa7aea4 = b_cfe9abb40aa7aea4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cfe9abb40aa7aea4[] = {
  &s_bb3e161d2679685d,
  &s_e6824aebf526d4e8,
  &s_e829b4bc9d70eb7e,
  &s_f1e09ba70d4ac430,
  &s_ff3efec28716255a,
};
static const uint16_t m_cfe9abb40aa7aea4[] = {5, 4, 6, 0, 3, 2, 1};
static const uint16_t i_cfe9abb40aa7aea4[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_cfe9abb40aa7aea4 = {
  0xcfe9abb40aa7aea4, b_cfe9abb40aa7aea4.words, 134, d_cfe9abb40aa7aea4, m_cfe9abb40aa7aea4,
  5, 7, i_cfe9abb40aa7aea4, nullptr, nullptr, { &s_cfe9abb40aa7aea4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_b8373e593ee6b1da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218, 177, 230,  62,  89,  62,  55, 184,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   1,   0,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    251,  64,  58,  45,  40, 114, 132, 220,
     79, 184,  86,  28, 239, 209, 102, 138,
    145,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    210, 195, 232, 184, 254, 223,  49, 252,
    169,   3, 245,   2, 175,  17,  46, 250,
    125,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      2,  68, 119,  84, 144, 101,  57, 137,
    193,  46,  72, 108,   3,  67, 227, 185,
    105,   0,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    236, 120,  12, 230, 229,  73, 140, 222,
    178, 203, 203, 185,  26,  99,  73, 147,
     93,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     44,  59, 164, 241, 243, 126, 149, 201,
    233,  16, 169, 121,  79,  86, 170, 253,
     77,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
     99, 114, 101,  97, 116, 101,  71,  97,
    100, 103, 101, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116, 101, 110,  70, 111,
    114,  70, 114,  97, 109, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101,  68, 120,
    103, 105,  84, 101, 120, 116, 117, 114,
    101,  70, 111, 114,  71,  97, 100, 103,
    101, 116, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 117, 115, 104,  80, 111, 107, 101,
    114,  80, 114, 111, 120, 105, 109, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 117, 115, 104,  71, 114,  97,  98,
     73, 110, 116, 101, 114, 115, 101,  99,
    116, 105, 111, 110, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b8373e593ee6b1da = b_b8373e593ee6b1da.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b8373e593ee6b1da[] = {
  &s_8939659054774402,
  &s_8a66d1ef1c56b84f,
  &s_9349631ab9cbcbb2,
  &s_b9e343036c482ec1,
  &s_c9957ef3f1a43b2c,
  &s_dc8472282d3a40fb,
  &s_de8c49e5e60c78ec,
  &s_fa2e11af02f503a9,
  &s_fc31dffeb8e8c3d2,
  &s_fdaa564f79a910e9,
};
static const uint16_t m_b8373e593ee6b1da[] = {0, 1, 4, 3, 2};
const ::capnp::_::RawSchema s_b8373e593ee6b1da = {
  0xb8373e593ee6b1da, b_b8373e593ee6b1da.words, 77, d_b8373e593ee6b1da, m_b8373e593ee6b1da,
  10, 5, nullptr, nullptr, nullptr, { &s_b8373e593ee6b1da, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_dc8472282d3a40fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251,  64,  58,  45,  40, 114, 132, 220,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
     99, 114, 101,  97, 116, 101,  71,  97,
    100, 103, 101, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 105, 116, 105,  97, 108,  72,
    111, 111, 107,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc8472282d3a40fb = b_dc8472282d3a40fb.words;
#if !CAPNP_LITE
static const uint16_t m_dc8472282d3a40fb[] = {1, 0};
static const uint16_t i_dc8472282d3a40fb[] = {0, 1};
const ::capnp::_::RawSchema s_dc8472282d3a40fb = {
  0xdc8472282d3a40fb, b_dc8472282d3a40fb.words, 50, nullptr, m_dc8472282d3a40fb,
  0, 2, i_dc8472282d3a40fb, nullptr, nullptr, { &s_dc8472282d3a40fb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8a66d1ef1c56b84f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 184,  86,  28, 239, 209, 102, 138,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
     99, 114, 101,  97, 116, 101,  71,  97,
    100, 103, 101, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    103,  97, 100, 103, 101, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     74, 136, 185, 250, 191, 193, 253, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a66d1ef1c56b84f = b_8a66d1ef1c56b84f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a66d1ef1c56b84f[] = {
  &s_dcfdc1bffab9884a,
};
static const uint16_t m_8a66d1ef1c56b84f[] = {0, 1};
static const uint16_t i_8a66d1ef1c56b84f[] = {0, 1};
const ::capnp::_::RawSchema s_8a66d1ef1c56b84f = {
  0x8a66d1ef1c56b84f, b_8a66d1ef1c56b84f.words, 50, d_8a66d1ef1c56b84f, m_8a66d1ef1c56b84f,
  1, 2, i_8a66d1ef1c56b84f, nullptr, nullptr, { &s_8a66d1ef1c56b84f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fc31dffeb8e8c3d2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 195, 232, 184, 254, 223,  49, 252,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    108, 105, 115, 116, 101, 110,  70, 111,
    114,  70, 114,  97, 109, 101, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 115, 116, 101, 110, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    247,  16, 186,  83, 160, 197,  21, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc31dffeb8e8c3d2 = b_fc31dffeb8e8c3d2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fc31dffeb8e8c3d2[] = {
  &s_8015c5a053ba10f7,
};
static const uint16_t m_fc31dffeb8e8c3d2[] = {0};
static const uint16_t i_fc31dffeb8e8c3d2[] = {0};
const ::capnp::_::RawSchema s_fc31dffeb8e8c3d2 = {
  0xfc31dffeb8e8c3d2, b_fc31dffeb8e8c3d2.words, 35, d_fc31dffeb8e8c3d2, m_fc31dffeb8e8c3d2,
  1, 1, i_fc31dffeb8e8c3d2, nullptr, nullptr, { &s_fc31dffeb8e8c3d2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_fa2e11af02f503a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169,   3, 245,   2, 175,  17,  46, 250,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    108, 105, 115, 116, 101, 110,  70, 111,
    114,  70, 114,  97, 109, 101, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_fa2e11af02f503a9 = b_fa2e11af02f503a9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fa2e11af02f503a9 = {
  0xfa2e11af02f503a9, b_fa2e11af02f503a9.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fa2e11af02f503a9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<58> b_8939659054774402 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2,  68, 119,  84, 144, 101,  57, 137,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    117, 112, 100,  97, 116, 101,  68, 120,
    103, 105,  84, 101, 120, 116, 117, 114,
    101,  70, 111, 114,  71,  97, 100, 103,
    101, 116, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
    103,  97, 100, 103, 101, 116,  73, 100,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104,  97, 114, 101, 100,  84, 101,
    120, 116, 117, 114, 101,  73, 110, 102,
    111,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    188,  53, 197, 231,  27, 148, 163, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8939659054774402 = b_8939659054774402.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8939659054774402[] = {
  &s_dba3941be7c535bc,
};
static const uint16_t m_8939659054774402[] = {0, 1};
static const uint16_t i_8939659054774402[] = {0, 1};
const ::capnp::_::RawSchema s_8939659054774402 = {
  0x8939659054774402, b_8939659054774402.words, 58, d_8939659054774402, m_8939659054774402,
  1, 2, i_8939659054774402, nullptr, nullptr, { &s_8939659054774402, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b9e343036c482ec1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193,  46,  72, 108,   3,  67, 227, 185,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    117, 112, 100,  97, 116, 101,  68, 120,
    103, 105,  84, 101, 120, 116, 117, 114,
    101,  70, 111, 114,  71,  97, 100, 103,
    101, 116, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9e343036c482ec1 = b_b9e343036c482ec1.words;
#if !CAPNP_LITE
static const uint16_t m_b9e343036c482ec1[] = {0};
static const uint16_t i_b9e343036c482ec1[] = {0};
const ::capnp::_::RawSchema s_b9e343036c482ec1 = {
  0xb9e343036c482ec1, b_b9e343036c482ec1.words, 36, nullptr, m_b9e343036c482ec1,
  0, 1, i_b9e343036c482ec1, nullptr, nullptr, { &s_b9e343036c482ec1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_de8c49e5e60c78ec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 120,  12, 230, 229,  73, 140, 222,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    112, 117, 115, 104,  80, 111, 107, 101,
    114,  80, 114, 111, 120, 105, 109, 105,
    116, 121,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 107, 101, 114,  73, 100,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 120, 105, 109, 105, 116,
    121,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    138, 196, 212,  21, 168, 142,  91, 175,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_de8c49e5e60c78ec = b_de8c49e5e60c78ec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_de8c49e5e60c78ec[] = {
  &s_af5b8ea815d4c48a,
};
static const uint16_t m_de8c49e5e60c78ec[] = {0, 1};
static const uint16_t i_de8c49e5e60c78ec[] = {0, 1};
const ::capnp::_::RawSchema s_de8c49e5e60c78ec = {
  0xde8c49e5e60c78ec, b_de8c49e5e60c78ec.words, 55, d_de8c49e5e60c78ec, m_de8c49e5e60c78ec,
  1, 2, i_de8c49e5e60c78ec, nullptr, nullptr, { &s_de8c49e5e60c78ec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9349631ab9cbcbb2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    178, 203, 203, 185,  26,  99,  73, 147,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    112, 117, 115, 104,  80, 111, 107, 101,
    114,  80, 114, 111, 120, 105, 109, 105,
    116, 121,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9349631ab9cbcbb2 = b_9349631ab9cbcbb2.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9349631ab9cbcbb2 = {
  0x9349631ab9cbcbb2, b_9349631ab9cbcbb2.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9349631ab9cbcbb2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<91> b_c9957ef3f1a43b2c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44,  59, 164, 241, 243, 126, 149, 201,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    112, 117, 115, 104,  71, 114,  97,  98,
     73, 110, 116, 101, 114, 115, 101,  99,
    116, 105, 111, 110, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97,  98,  98, 101, 114,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 115,  71, 114,  97,  98,  80, 114,
    101, 115, 115, 101, 100,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 115, 101,  99,
    116, 105, 111, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9957ef3f1a43b2c = b_c9957ef3f1a43b2c.words;
#if !CAPNP_LITE
static const uint16_t m_c9957ef3f1a43b2c[] = {0, 3, 2, 1};
static const uint16_t i_c9957ef3f1a43b2c[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_c9957ef3f1a43b2c = {
  0xc9957ef3f1a43b2c, b_c9957ef3f1a43b2c.words, 91, nullptr, m_c9957ef3f1a43b2c,
  0, 4, i_c9957ef3f1a43b2c, nullptr, nullptr, { &s_c9957ef3f1a43b2c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_fdaa564f79a910e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233,  16, 169, 121,  79,  86, 170, 253,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  83, 101, 114, 118, 101, 114,  46,
    112, 117, 115, 104,  71, 114,  97,  98,
     73, 110, 116, 101, 114, 115, 101,  99,
    116, 105, 111, 110, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_fdaa564f79a910e9 = b_fdaa564f79a910e9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fdaa564f79a910e9 = {
  0xfdaa564f79a910e9, b_fdaa564f79a910e9.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fdaa564f79a910e9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_dcfdc1bffab9884a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74, 136, 185, 250, 191, 193, 253, 220,
     15,   0,   0,   0,   3,   0,   0,   0,
    199, 165, 218, 199, 175, 159,  62, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   1,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,  98, 150,  89, 145,   9, 106, 189,
     84, 212,  17,  56,  77, 157,  77, 221,
    177,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    105, 165, 144,  71, 191, 218, 187, 230,
     36,  79, 244,  64, 208,  26,  40, 160,
    153,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     36, 128, 246,  96,  46, 122, 221, 202,
     36, 230, 165,  28, 102,  41, 228, 188,
    129,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    103,  59, 236,  37, 211,  15, 165, 214,
    207, 247,   4, 255,  81, 101, 252, 161,
    113,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     18, 164, 136, 150, 135, 234,   1, 211,
    171, 240, 201,  44, 160, 245, 126, 168,
     93,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     57, 129,   2,  60, 100,  58, 133, 252,
      8,  27, 231, 169, 245, 255,  34, 172,
     73,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101,  83,  99,
    101, 110, 101,  71, 114,  97, 112, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 117, 115, 104,  77, 111, 117, 115,
    101,  69, 118, 101, 110, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 110, 100,  72,  97, 112, 116,
    105,  99,  69, 118, 101, 110, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 117, 115, 104,  71, 114,  97,  98,
     69, 118, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_dcfdc1bffab9884a = b_dcfdc1bffab9884a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dcfdc1bffab9884a[] = {
  &s_a0281ad040f44f24,
  &s_a1fc6551ff04f7cf,
  &s_a87ef5a02cc9f0ab,
  &s_ac22fff5a9e71b08,
  &s_bce429661ca5e624,
  &s_bd6a0991599662d5,
  &s_cadd7a2e60f68024,
  &s_d301ea879688a412,
  &s_d6a50fd325ec3b67,
  &s_dd4d9d4d3811d454,
  &s_e6bbdabf4790a569,
  &s_fc853a643c028139,
};
static const uint16_t m_dcfdc1bffab9884a[] = {1, 0, 5, 3, 4, 2};
const ::capnp::_::RawSchema s_dcfdc1bffab9884a = {
  0xdcfdc1bffab9884a, b_dcfdc1bffab9884a.words, 83, d_dcfdc1bffab9884a, m_dcfdc1bffab9884a,
  12, 6, nullptr, nullptr, nullptr, { &s_dcfdc1bffab9884a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_bd6a0991599662d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213,  98, 150,  89, 145,   9, 106, 189,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    110,  97, 109, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd6a0991599662d5 = b_bd6a0991599662d5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bd6a0991599662d5 = {
  0xbd6a0991599662d5, b_bd6a0991599662d5.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bd6a0991599662d5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_dd4d9d4d3811d454 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 212,  17,  56,  77, 157,  77, 221,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    110,  97, 109, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd4d9d4d3811d454 = b_dd4d9d4d3811d454.words;
#if !CAPNP_LITE
static const uint16_t m_dd4d9d4d3811d454[] = {0};
static const uint16_t i_dd4d9d4d3811d454[] = {0};
const ::capnp::_::RawSchema s_dd4d9d4d3811d454 = {
  0xdd4d9d4d3811d454, b_dd4d9d4d3811d454.words, 33, nullptr, m_dd4d9d4d3811d454,
  0, 1, i_dd4d9d4d3811d454, nullptr, nullptr, { &s_dd4d9d4d3811d454, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_e6bbdabf4790a569 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105, 165, 144,  71, 191, 218, 187, 230,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    100, 101, 115, 116, 114, 111, 121,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_e6bbdabf4790a569 = b_e6bbdabf4790a569.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e6bbdabf4790a569 = {
  0xe6bbdabf4790a569, b_e6bbdabf4790a569.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e6bbdabf4790a569, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a0281ad040f44f24 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36,  79, 244,  64, 208,  26,  40, 160,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    100, 101, 115, 116, 114, 111, 121,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a0281ad040f44f24 = b_a0281ad040f44f24.words;
#if !CAPNP_LITE
static const uint16_t m_a0281ad040f44f24[] = {0};
static const uint16_t i_a0281ad040f44f24[] = {0};
const ::capnp::_::RawSchema s_a0281ad040f44f24 = {
  0xa0281ad040f44f24, b_a0281ad040f44f24.words, 33, nullptr, m_a0281ad040f44f24,
  0, 1, i_a0281ad040f44f24, nullptr, nullptr, { &s_a0281ad040f44f24, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cadd7a2e60f68024 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 128, 246,  96,  46, 122, 221, 202,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    117, 112, 100,  97, 116, 101,  83,  99,
    101, 110, 101,  71, 114,  97, 112, 104,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 111, 111, 116,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    164, 174, 167,  10, 180, 171, 233, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cadd7a2e60f68024 = b_cadd7a2e60f68024.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cadd7a2e60f68024[] = {
  &s_cfe9abb40aa7aea4,
};
static const uint16_t m_cadd7a2e60f68024[] = {0};
static const uint16_t i_cadd7a2e60f68024[] = {0};
const ::capnp::_::RawSchema s_cadd7a2e60f68024 = {
  0xcadd7a2e60f68024, b_cadd7a2e60f68024.words, 34, d_cadd7a2e60f68024, m_cadd7a2e60f68024,
  1, 1, i_cadd7a2e60f68024, nullptr, nullptr, { &s_cadd7a2e60f68024, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bce429661ca5e624 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 230, 165,  28, 102,  41, 228, 188,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    117, 112, 100,  97, 116, 101,  83,  99,
    101, 110, 101,  71, 114,  97, 112, 104,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bce429661ca5e624 = b_bce429661ca5e624.words;
#if !CAPNP_LITE
static const uint16_t m_bce429661ca5e624[] = {0};
static const uint16_t i_bce429661ca5e624[] = {0};
const ::capnp::_::RawSchema s_bce429661ca5e624 = {
  0xbce429661ca5e624, b_bce429661ca5e624.words, 35, nullptr, m_bce429661ca5e624,
  0, 1, i_bce429661ca5e624, nullptr, nullptr, { &s_bce429661ca5e624, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_d6a50fd325ec3b67 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    103,  59, 236,  37, 211,  15, 165, 214,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    112, 117, 115, 104,  77, 111, 117, 115,
    101,  69, 118, 101, 110, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 107, 101, 114,  78, 111, 100,
    101,  73, 100,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236, 133, 232, 252,   2, 229, 101, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6a50fd325ec3b67 = b_d6a50fd325ec3b67.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6a50fd325ec3b67[] = {
  &s_e865e502fce885ec,
};
static const uint16_t m_d6a50fd325ec3b67[] = {1, 0};
static const uint16_t i_d6a50fd325ec3b67[] = {0, 1};
const ::capnp::_::RawSchema s_d6a50fd325ec3b67 = {
  0xd6a50fd325ec3b67, b_d6a50fd325ec3b67.words, 50, d_d6a50fd325ec3b67, m_d6a50fd325ec3b67,
  1, 2, i_d6a50fd325ec3b67, nullptr, nullptr, { &s_d6a50fd325ec3b67, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a1fc6551ff04f7cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 247,   4, 255,  81, 101, 252, 161,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    112, 117, 115, 104,  77, 111, 117, 115,
    101,  69, 118, 101, 110, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_a1fc6551ff04f7cf = b_a1fc6551ff04f7cf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a1fc6551ff04f7cf = {
  0xa1fc6551ff04f7cf, b_a1fc6551ff04f7cf.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a1fc6551ff04f7cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_d301ea879688a412 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 164, 136, 150, 135, 234,   1, 211,
     24,   0,   0,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    115, 101, 110, 100,  72,  97, 112, 116,
    105,  99,  69, 118, 101, 110, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,  71, 108, 111,  98,
     97, 108,  73, 100,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 109, 112, 108, 105, 116, 117, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 101, 113, 117, 101, 110,  99,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 117, 114,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d301ea879688a412 = b_d301ea879688a412.words;
#if !CAPNP_LITE
static const uint16_t m_d301ea879688a412[] = {1, 3, 2, 0};
static const uint16_t i_d301ea879688a412[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d301ea879688a412 = {
  0xd301ea879688a412, b_d301ea879688a412.words, 83, nullptr, m_d301ea879688a412,
  0, 4, i_d301ea879688a412, nullptr, nullptr, { &s_d301ea879688a412, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a87ef5a02cc9f0ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171, 240, 201,  44, 160, 245, 126, 168,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    115, 101, 110, 100,  72,  97, 112, 116,
    105,  99,  69, 118, 101, 110, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_a87ef5a02cc9f0ab = b_a87ef5a02cc9f0ab.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a87ef5a02cc9f0ab = {
  0xa87ef5a02cc9f0ab, b_a87ef5a02cc9f0ab.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a87ef5a02cc9f0ab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_fc853a643c028139 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57, 129,   2,  60, 100,  58, 133, 252,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    112, 117, 115, 104,  71, 114,  97,  98,
     69, 118, 101, 110, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    103, 114,  97,  98,  98, 101, 114,  78,
    111, 100, 101,  73, 100,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     84, 130, 185,  26, 183,  77,   7, 129,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc853a643c028139 = b_fc853a643c028139.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fc853a643c028139[] = {
  &s_81074db71ab98254,
};
static const uint16_t m_fc853a643c028139[] = {1, 0};
static const uint16_t i_fc853a643c028139[] = {0, 1};
const ::capnp::_::RawSchema s_fc853a643c028139 = {
  0xfc853a643c028139, b_fc853a643c028139.words, 50, d_fc853a643c028139, m_fc853a643c028139,
  1, 2, i_fc853a643c028139, nullptr, nullptr, { &s_fc853a643c028139, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ac22fff5a9e71b08 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8,  27, 231, 169, 245, 255,  34, 172,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  97, 114, 100, 118,  97, 114, 107,
     46,  99,  97, 112, 110, 112,  58,  65,
    118,  71,  97, 100, 103, 101, 116,  46,
    112, 117, 115, 104,  71, 114,  97,  98,
     69, 118, 101, 110, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ac22fff5a9e71b08 = b_ac22fff5a9e71b08.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ac22fff5a9e71b08 = {
  0xac22fff5a9e71b08, b_ac22fff5a9e71b08.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ac22fff5a9e71b08, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// AvSharedTextureInfo
constexpr uint16_t AvSharedTextureInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t AvSharedTextureInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvSharedTextureInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvSharedTextureInfo::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvVector
constexpr uint16_t AvVector::_capnpPrivate::dataWordSize;
constexpr uint16_t AvVector::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvVector::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvVector::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvColor
constexpr uint16_t AvColor::_capnpPrivate::dataWordSize;
constexpr uint16_t AvColor::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvColor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvColor::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvQuaternion
constexpr uint16_t AvQuaternion::_capnpPrivate::dataWordSize;
constexpr uint16_t AvQuaternion::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvQuaternion::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvQuaternion::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvTransform
constexpr uint16_t AvTransform::_capnpPrivate::dataWordSize;
constexpr uint16_t AvTransform::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvTransform::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvTransform::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvLight
constexpr uint16_t AvLight::_capnpPrivate::dataWordSize;
constexpr uint16_t AvLight::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvLight::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvLight::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadgetTextureInfo
constexpr uint16_t AvGadgetTextureInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadgetTextureInfo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadgetTextureInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadgetTextureInfo::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvVisualFrame
constexpr uint16_t AvVisualFrame::_capnpPrivate::dataWordSize;
constexpr uint16_t AvVisualFrame::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvVisualFrame::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvVisualFrame::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvFrameListener::NewFrameParams,  ::AvFrameListener::NewFrameResults>
AvFrameListener::Client::newFrameRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvFrameListener::NewFrameParams,  ::AvFrameListener::NewFrameResults>(
      0x8015c5a053ba10f7ull, 0, sizeHint);
}
::kj::Promise<void> AvFrameListener::Server::newFrame(NewFrameContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvFrameListener", "newFrame",
      0x8015c5a053ba10f7ull, 0);
}
::capnp::Request< ::AvFrameListener::SendHapticEventParams,  ::AvFrameListener::SendHapticEventResults>
AvFrameListener::Client::sendHapticEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvFrameListener::SendHapticEventParams,  ::AvFrameListener::SendHapticEventResults>(
      0x8015c5a053ba10f7ull, 1, sizeHint);
}
::kj::Promise<void> AvFrameListener::Server::sendHapticEvent(SendHapticEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvFrameListener", "sendHapticEvent",
      0x8015c5a053ba10f7ull, 1);
}
::capnp::Request< ::AvFrameListener::GrabEventParams,  ::AvFrameListener::GrabEventResults>
AvFrameListener::Client::grabEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvFrameListener::GrabEventParams,  ::AvFrameListener::GrabEventResults>(
      0x8015c5a053ba10f7ull, 2, sizeHint);
}
::kj::Promise<void> AvFrameListener::Server::grabEvent(GrabEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvFrameListener", "grabEvent",
      0x8015c5a053ba10f7ull, 2);
}
::kj::Promise<void> AvFrameListener::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8015c5a053ba10f7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvFrameListener", interfaceId);
  }
}
::kj::Promise<void> AvFrameListener::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return newFrame(::capnp::Capability::Server::internalGetTypedContext<
           ::AvFrameListener::NewFrameParams,  ::AvFrameListener::NewFrameResults>(context));
    case 1:
      return sendHapticEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvFrameListener::SendHapticEventParams,  ::AvFrameListener::SendHapticEventResults>(context));
    case 2:
      return grabEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvFrameListener::GrabEventParams,  ::AvFrameListener::GrabEventResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvFrameListener",
          0x8015c5a053ba10f7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvFrameListener
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::NewFrameParams
constexpr uint16_t AvFrameListener::NewFrameParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::NewFrameParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::NewFrameParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::NewFrameParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::NewFrameResults
constexpr uint16_t AvFrameListener::NewFrameResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::NewFrameResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::NewFrameResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::NewFrameResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::SendHapticEventParams
constexpr uint16_t AvFrameListener::SendHapticEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::SendHapticEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::SendHapticEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::SendHapticEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::SendHapticEventResults
constexpr uint16_t AvFrameListener::SendHapticEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::SendHapticEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::SendHapticEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::SendHapticEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::GrabEventParams
constexpr uint16_t AvFrameListener::GrabEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::GrabEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::GrabEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::GrabEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvFrameListener::GrabEventResults
constexpr uint16_t AvFrameListener::GrabEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvFrameListener::GrabEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvFrameListener::GrabEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvFrameListener::GrabEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPanelProximity
constexpr uint16_t AvPanelProximity::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPanelProximity::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPanelProximity::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPanelProximity::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvPokerProcessor::UpdatePanelProximityParams,  ::AvPokerProcessor::UpdatePanelProximityResults>
AvPokerProcessor::Client::updatePanelProximityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvPokerProcessor::UpdatePanelProximityParams,  ::AvPokerProcessor::UpdatePanelProximityResults>(
      0xe6824aebf526d4e8ull, 0, sizeHint);
}
::kj::Promise<void> AvPokerProcessor::Server::updatePanelProximity(UpdatePanelProximityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvPokerProcessor", "updatePanelProximity",
      0xe6824aebf526d4e8ull, 0);
}
::kj::Promise<void> AvPokerProcessor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe6824aebf526d4e8ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvPokerProcessor", interfaceId);
  }
}
::kj::Promise<void> AvPokerProcessor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return updatePanelProximity(::capnp::Capability::Server::internalGetTypedContext<
           ::AvPokerProcessor::UpdatePanelProximityParams,  ::AvPokerProcessor::UpdatePanelProximityResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvPokerProcessor",
          0xe6824aebf526d4e8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvPokerProcessor
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPokerProcessor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPokerProcessor::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPokerProcessor::UpdatePanelProximityParams
constexpr uint16_t AvPokerProcessor::UpdatePanelProximityParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPokerProcessor::UpdatePanelProximityParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPokerProcessor::UpdatePanelProximityParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPokerProcessor::UpdatePanelProximityParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPokerProcessor::UpdatePanelProximityResults
constexpr uint16_t AvPokerProcessor::UpdatePanelProximityResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPokerProcessor::UpdatePanelProximityResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPokerProcessor::UpdatePanelProximityResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPokerProcessor::UpdatePanelProximityResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPanelMouseEvent
constexpr uint16_t AvPanelMouseEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPanelMouseEvent::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPanelMouseEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPanelMouseEvent::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvPanelProcessor::MouseEventParams,  ::AvPanelProcessor::MouseEventResults>
AvPanelProcessor::Client::mouseEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvPanelProcessor::MouseEventParams,  ::AvPanelProcessor::MouseEventResults>(
      0xe829b4bc9d70eb7eull, 0, sizeHint);
}
::kj::Promise<void> AvPanelProcessor::Server::mouseEvent(MouseEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvPanelProcessor", "mouseEvent",
      0xe829b4bc9d70eb7eull, 0);
}
::kj::Promise<void> AvPanelProcessor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe829b4bc9d70eb7eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvPanelProcessor", interfaceId);
  }
}
::kj::Promise<void> AvPanelProcessor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return mouseEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvPanelProcessor::MouseEventParams,  ::AvPanelProcessor::MouseEventResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvPanelProcessor",
          0xe829b4bc9d70eb7eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvPanelProcessor
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPanelProcessor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPanelProcessor::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPanelProcessor::MouseEventParams
constexpr uint16_t AvPanelProcessor::MouseEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPanelProcessor::MouseEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPanelProcessor::MouseEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPanelProcessor::MouseEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvPanelProcessor::MouseEventResults
constexpr uint16_t AvPanelProcessor::MouseEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvPanelProcessor::MouseEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvPanelProcessor::MouseEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvPanelProcessor::MouseEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvGrabberProcessor::UpdateGrabberIntersectionsParams,  ::AvGrabberProcessor::UpdateGrabberIntersectionsResults>
AvGrabberProcessor::Client::updateGrabberIntersectionsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGrabberProcessor::UpdateGrabberIntersectionsParams,  ::AvGrabberProcessor::UpdateGrabberIntersectionsResults>(
      0xff3efec28716255aull, 0, sizeHint);
}
::kj::Promise<void> AvGrabberProcessor::Server::updateGrabberIntersections(UpdateGrabberIntersectionsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGrabberProcessor", "updateGrabberIntersections",
      0xff3efec28716255aull, 0);
}
::kj::Promise<void> AvGrabberProcessor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xff3efec28716255aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvGrabberProcessor", interfaceId);
  }
}
::kj::Promise<void> AvGrabberProcessor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return updateGrabberIntersections(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGrabberProcessor::UpdateGrabberIntersectionsParams,  ::AvGrabberProcessor::UpdateGrabberIntersectionsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvGrabberProcessor",
          0xff3efec28716255aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvGrabberProcessor
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabberProcessor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabberProcessor::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGrabberProcessor::UpdateGrabberIntersectionsParams
constexpr uint16_t AvGrabberProcessor::UpdateGrabberIntersectionsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGrabberProcessor::UpdateGrabberIntersectionsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabberProcessor::UpdateGrabberIntersectionsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabberProcessor::UpdateGrabberIntersectionsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGrabberProcessor::UpdateGrabberIntersectionsResults
constexpr uint16_t AvGrabberProcessor::UpdateGrabberIntersectionsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGrabberProcessor::UpdateGrabberIntersectionsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabberProcessor::UpdateGrabberIntersectionsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabberProcessor::UpdateGrabberIntersectionsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGrabEvent
constexpr uint16_t AvGrabEvent::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGrabEvent::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabEvent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabEvent::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvGrabbableProcessor::GrabEventParams,  ::AvGrabbableProcessor::GrabEventResults>
AvGrabbableProcessor::Client::grabEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGrabbableProcessor::GrabEventParams,  ::AvGrabbableProcessor::GrabEventResults>(
      0xbb3e161d2679685dull, 0, sizeHint);
}
::kj::Promise<void> AvGrabbableProcessor::Server::grabEvent(GrabEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGrabbableProcessor", "grabEvent",
      0xbb3e161d2679685dull, 0);
}
::kj::Promise<void> AvGrabbableProcessor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xbb3e161d2679685dull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvGrabbableProcessor", interfaceId);
  }
}
::kj::Promise<void> AvGrabbableProcessor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return grabEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGrabbableProcessor::GrabEventParams,  ::AvGrabbableProcessor::GrabEventResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvGrabbableProcessor",
          0xbb3e161d2679685dull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvGrabbableProcessor
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabbableProcessor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabbableProcessor::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGrabbableProcessor::GrabEventParams
constexpr uint16_t AvGrabbableProcessor::GrabEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGrabbableProcessor::GrabEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabbableProcessor::GrabEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabbableProcessor::GrabEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGrabbableProcessor::GrabEventResults
constexpr uint16_t AvGrabbableProcessor::GrabEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGrabbableProcessor::GrabEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGrabbableProcessor::GrabEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGrabbableProcessor::GrabEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvVolume
constexpr uint16_t AvVolume::_capnpPrivate::dataWordSize;
constexpr uint16_t AvVolume::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvVolume::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvVolume::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvNode
constexpr uint16_t AvNode::_capnpPrivate::dataWordSize;
constexpr uint16_t AvNode::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvNode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvNode::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvNodeWrapper
constexpr uint16_t AvNodeWrapper::_capnpPrivate::dataWordSize;
constexpr uint16_t AvNodeWrapper::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvNodeWrapper::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvNodeWrapper::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvNodeRoot
constexpr uint16_t AvNodeRoot::_capnpPrivate::dataWordSize;
constexpr uint16_t AvNodeRoot::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvNodeRoot::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvNodeRoot::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvServer::CreateGadgetParams,  ::AvServer::CreateGadgetResults>
AvServer::Client::createGadgetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvServer::CreateGadgetParams,  ::AvServer::CreateGadgetResults>(
      0xb8373e593ee6b1daull, 0, sizeHint);
}
::kj::Promise<void> AvServer::Server::createGadget(CreateGadgetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvServer", "createGadget",
      0xb8373e593ee6b1daull, 0);
}
::capnp::Request< ::AvServer::ListenForFramesParams,  ::AvServer::ListenForFramesResults>
AvServer::Client::listenForFramesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvServer::ListenForFramesParams,  ::AvServer::ListenForFramesResults>(
      0xb8373e593ee6b1daull, 1, sizeHint);
}
::kj::Promise<void> AvServer::Server::listenForFrames(ListenForFramesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvServer", "listenForFrames",
      0xb8373e593ee6b1daull, 1);
}
::capnp::Request< ::AvServer::UpdateDxgiTextureForGadgetsParams,  ::AvServer::UpdateDxgiTextureForGadgetsResults>
AvServer::Client::updateDxgiTextureForGadgetsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvServer::UpdateDxgiTextureForGadgetsParams,  ::AvServer::UpdateDxgiTextureForGadgetsResults>(
      0xb8373e593ee6b1daull, 2, sizeHint);
}
::kj::Promise<void> AvServer::Server::updateDxgiTextureForGadgets(UpdateDxgiTextureForGadgetsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvServer", "updateDxgiTextureForGadgets",
      0xb8373e593ee6b1daull, 2);
}
::capnp::Request< ::AvServer::PushPokerProximityParams,  ::AvServer::PushPokerProximityResults>
AvServer::Client::pushPokerProximityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvServer::PushPokerProximityParams,  ::AvServer::PushPokerProximityResults>(
      0xb8373e593ee6b1daull, 3, sizeHint);
}
::kj::Promise<void> AvServer::Server::pushPokerProximity(PushPokerProximityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvServer", "pushPokerProximity",
      0xb8373e593ee6b1daull, 3);
}
::capnp::Request< ::AvServer::PushGrabIntersectionsParams,  ::AvServer::PushGrabIntersectionsResults>
AvServer::Client::pushGrabIntersectionsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvServer::PushGrabIntersectionsParams,  ::AvServer::PushGrabIntersectionsResults>(
      0xb8373e593ee6b1daull, 4, sizeHint);
}
::kj::Promise<void> AvServer::Server::pushGrabIntersections(PushGrabIntersectionsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvServer", "pushGrabIntersections",
      0xb8373e593ee6b1daull, 4);
}
::kj::Promise<void> AvServer::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb8373e593ee6b1daull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvServer", interfaceId);
  }
}
::kj::Promise<void> AvServer::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return createGadget(::capnp::Capability::Server::internalGetTypedContext<
           ::AvServer::CreateGadgetParams,  ::AvServer::CreateGadgetResults>(context));
    case 1:
      return listenForFrames(::capnp::Capability::Server::internalGetTypedContext<
           ::AvServer::ListenForFramesParams,  ::AvServer::ListenForFramesResults>(context));
    case 2:
      return updateDxgiTextureForGadgets(::capnp::Capability::Server::internalGetTypedContext<
           ::AvServer::UpdateDxgiTextureForGadgetsParams,  ::AvServer::UpdateDxgiTextureForGadgetsResults>(context));
    case 3:
      return pushPokerProximity(::capnp::Capability::Server::internalGetTypedContext<
           ::AvServer::PushPokerProximityParams,  ::AvServer::PushPokerProximityResults>(context));
    case 4:
      return pushGrabIntersections(::capnp::Capability::Server::internalGetTypedContext<
           ::AvServer::PushGrabIntersectionsParams,  ::AvServer::PushGrabIntersectionsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvServer",
          0xb8373e593ee6b1daull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvServer
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::CreateGadgetParams
constexpr uint16_t AvServer::CreateGadgetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::CreateGadgetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::CreateGadgetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::CreateGadgetParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::CreateGadgetResults
constexpr uint16_t AvServer::CreateGadgetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::CreateGadgetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::CreateGadgetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::CreateGadgetResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::ListenForFramesParams
constexpr uint16_t AvServer::ListenForFramesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::ListenForFramesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::ListenForFramesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::ListenForFramesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::ListenForFramesResults
constexpr uint16_t AvServer::ListenForFramesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::ListenForFramesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::ListenForFramesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::ListenForFramesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::UpdateDxgiTextureForGadgetsParams
constexpr uint16_t AvServer::UpdateDxgiTextureForGadgetsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::UpdateDxgiTextureForGadgetsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::UpdateDxgiTextureForGadgetsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::UpdateDxgiTextureForGadgetsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::UpdateDxgiTextureForGadgetsResults
constexpr uint16_t AvServer::UpdateDxgiTextureForGadgetsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::UpdateDxgiTextureForGadgetsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::UpdateDxgiTextureForGadgetsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::UpdateDxgiTextureForGadgetsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::PushPokerProximityParams
constexpr uint16_t AvServer::PushPokerProximityParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::PushPokerProximityParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::PushPokerProximityParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::PushPokerProximityParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::PushPokerProximityResults
constexpr uint16_t AvServer::PushPokerProximityResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::PushPokerProximityResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::PushPokerProximityResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::PushPokerProximityResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::PushGrabIntersectionsParams
constexpr uint16_t AvServer::PushGrabIntersectionsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::PushGrabIntersectionsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::PushGrabIntersectionsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::PushGrabIntersectionsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvServer::PushGrabIntersectionsResults
constexpr uint16_t AvServer::PushGrabIntersectionsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvServer::PushGrabIntersectionsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvServer::PushGrabIntersectionsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvServer::PushGrabIntersectionsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::AvGadget::NameParams,  ::AvGadget::NameResults>
AvGadget::Client::nameRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::NameParams,  ::AvGadget::NameResults>(
      0xdcfdc1bffab9884aull, 0, sizeHint);
}
::kj::Promise<void> AvGadget::Server::name(NameContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "name",
      0xdcfdc1bffab9884aull, 0);
}
::capnp::Request< ::AvGadget::DestroyParams,  ::AvGadget::DestroyResults>
AvGadget::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::DestroyParams,  ::AvGadget::DestroyResults>(
      0xdcfdc1bffab9884aull, 1, sizeHint);
}
::kj::Promise<void> AvGadget::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "destroy",
      0xdcfdc1bffab9884aull, 1);
}
::capnp::Request< ::AvGadget::UpdateSceneGraphParams,  ::AvGadget::UpdateSceneGraphResults>
AvGadget::Client::updateSceneGraphRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::UpdateSceneGraphParams,  ::AvGadget::UpdateSceneGraphResults>(
      0xdcfdc1bffab9884aull, 2, sizeHint);
}
::kj::Promise<void> AvGadget::Server::updateSceneGraph(UpdateSceneGraphContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "updateSceneGraph",
      0xdcfdc1bffab9884aull, 2);
}
::capnp::Request< ::AvGadget::PushMouseEventParams,  ::AvGadget::PushMouseEventResults>
AvGadget::Client::pushMouseEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::PushMouseEventParams,  ::AvGadget::PushMouseEventResults>(
      0xdcfdc1bffab9884aull, 3, sizeHint);
}
::kj::Promise<void> AvGadget::Server::pushMouseEvent(PushMouseEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "pushMouseEvent",
      0xdcfdc1bffab9884aull, 3);
}
::capnp::Request< ::AvGadget::SendHapticEventParams,  ::AvGadget::SendHapticEventResults>
AvGadget::Client::sendHapticEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::SendHapticEventParams,  ::AvGadget::SendHapticEventResults>(
      0xdcfdc1bffab9884aull, 4, sizeHint);
}
::kj::Promise<void> AvGadget::Server::sendHapticEvent(SendHapticEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "sendHapticEvent",
      0xdcfdc1bffab9884aull, 4);
}
::capnp::Request< ::AvGadget::PushGrabEventParams,  ::AvGadget::PushGrabEventResults>
AvGadget::Client::pushGrabEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AvGadget::PushGrabEventParams,  ::AvGadget::PushGrabEventResults>(
      0xdcfdc1bffab9884aull, 5, sizeHint);
}
::kj::Promise<void> AvGadget::Server::pushGrabEvent(PushGrabEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "aardvark.capnp:AvGadget", "pushGrabEvent",
      0xdcfdc1bffab9884aull, 5);
}
::kj::Promise<void> AvGadget::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xdcfdc1bffab9884aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("aardvark.capnp:AvGadget", interfaceId);
  }
}
::kj::Promise<void> AvGadget::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return name(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::NameParams,  ::AvGadget::NameResults>(context));
    case 1:
      return destroy(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::DestroyParams,  ::AvGadget::DestroyResults>(context));
    case 2:
      return updateSceneGraph(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::UpdateSceneGraphParams,  ::AvGadget::UpdateSceneGraphResults>(context));
    case 3:
      return pushMouseEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::PushMouseEventParams,  ::AvGadget::PushMouseEventResults>(context));
    case 4:
      return sendHapticEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::SendHapticEventParams,  ::AvGadget::SendHapticEventResults>(context));
    case 5:
      return pushGrabEvent(::capnp::Capability::Server::internalGetTypedContext<
           ::AvGadget::PushGrabEventParams,  ::AvGadget::PushGrabEventResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "aardvark.capnp:AvGadget",
          0xdcfdc1bffab9884aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AvGadget
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::NameParams
constexpr uint16_t AvGadget::NameParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::NameParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::NameParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::NameParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::NameResults
constexpr uint16_t AvGadget::NameResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::NameResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::NameResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::NameResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::DestroyParams
constexpr uint16_t AvGadget::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::DestroyParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::DestroyResults
constexpr uint16_t AvGadget::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::DestroyResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::UpdateSceneGraphParams
constexpr uint16_t AvGadget::UpdateSceneGraphParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::UpdateSceneGraphParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::UpdateSceneGraphParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::UpdateSceneGraphParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::UpdateSceneGraphResults
constexpr uint16_t AvGadget::UpdateSceneGraphResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::UpdateSceneGraphResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::UpdateSceneGraphResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::UpdateSceneGraphResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::PushMouseEventParams
constexpr uint16_t AvGadget::PushMouseEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::PushMouseEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::PushMouseEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::PushMouseEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::PushMouseEventResults
constexpr uint16_t AvGadget::PushMouseEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::PushMouseEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::PushMouseEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::PushMouseEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::SendHapticEventParams
constexpr uint16_t AvGadget::SendHapticEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::SendHapticEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::SendHapticEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::SendHapticEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::SendHapticEventResults
constexpr uint16_t AvGadget::SendHapticEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::SendHapticEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::SendHapticEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::SendHapticEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::PushGrabEventParams
constexpr uint16_t AvGadget::PushGrabEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::PushGrabEventParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::PushGrabEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::PushGrabEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AvGadget::PushGrabEventResults
constexpr uint16_t AvGadget::PushGrabEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AvGadget::PushGrabEventResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AvGadget::PushGrabEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AvGadget::PushGrabEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE




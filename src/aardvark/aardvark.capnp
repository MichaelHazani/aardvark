@0x9a3e9fafc7daa5c7; # unique file ID generated by Cap'n Proto


struct AvSharedTextureInfo
{
	enum Type
	{
		invalid @0;			#Somebody didn't set something
		d3d11Texture2D @1;	# An ID3D11Texture2D object
	}

	enum Format
	{
		r8g8b8a8 @0;
		b8g8r8a8 @1;
	}

	type @0 : Type;
	format @1 : Format;
	width @2 : UInt32;
	height @3 : UInt32;
	handle @4 : UInt64;
	invertY @5 : Bool;
}

interface AvModelSource
{
	uri @0 () -> ( uri: Text );
	data @1 () -> ( data: Data );
}

struct AvVector
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
}

struct AvColor
{
	r @0 : Float32;
	g @1 : Float32;
	b @2 : Float32;
	a @3 : Float32;
}

struct AvQuaternion
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
	w @3 : Float32;
}

struct AvTransform
{
	position @0: AvVector;
	rotation @1: AvQuaternion;
	scale @2: AvVector;
}

struct AvModel
{
	transform @0: AvTransform;
	source @1: AvModelSource;
}

struct AvLight
{
	transform @0: AvTransform;
	diffuse @1: AvColor;
}

struct AvAppTextureHandle
{
	appName @0: Text;
	appId @1: UInt32;
	sharedTextureInfo @2: AvSharedTextureInfo;
}

struct AvVisualFrame
{
	id @0: UInt64;
	roots @1: List( AvNodeRoot );
	appTextures @2: List( AvAppTextureHandle );
}

interface AvFrameListener
{
	newFrame @0 (frame: AvVisualFrame) -> (  );
}

struct AvPanelProximity
{
	panelId @0: UInt64;
	x @1: Float32;
	y @2: Float32;
	distance @3: Float32;
}

interface AvPokerHandler
{
	updatePanelProximity @0 ( pokerId: UInt32, proximity: List( AvPanelProximity ) ) -> ();
}

struct AvPanelMouseEvent
{
	enum Type
	{
		down @0;
		up @1;
		enter @2;
		leave @3;
		move @4;
	}

	type @0: Type;
	panelId @1: UInt64;
	pokerId @2: UInt64;
	x @3: Float32;
	y @4: Float32;
}

interface AvPanelHandler
{
	mouseEvent @0 ( panelId: UInt32, event: AvPanelMouseEvent ) -> ();
}

struct AvNode
{
	enum Type
	{
		invalid @0;			# something is broken about this node

		container @1;		# has no properties. Just contains other nodes
		origin @2;			# Sets the origin path
		transform @3;		# Contains a transform
		model @4;			# Contains a model URI
		panel @5;			# Contains: propInteractive, propTextureSource
		poker @6;			# has no properties
	}

	id @0: UInt32;
	name @1: Text;
	children @2: List(UInt32);
	type @3: Type = invalid;
	flags @4: UInt32 = 0;

	# These properties are allowed for a subset of node types
	propOrigin @5: Text;			# origin
	propTransform @6: AvTransform;	# transform
	propModelUri @7: Text;			# model
	propTextureSource @8: Text;		# panel
	propInteractive @9: Bool;		# panel
}

struct AvNodeWrapper
{
	node @0 : AvNode;
}

struct AvNodeRoot
{
	nodes @0 : List( AvNodeWrapper );
	sourceId @1 : UInt32;
	handlerPoker @2: AvPokerHandler;
	handlerPanel @3: AvPanelHandler;
}

interface AvServer
{
	createApp @0 ( name: Text ) -> ( app: AvApp );
	listenForFrames @1 ( listener: AvFrameListener ) -> ();
	getModelSource @2 ( uri: Text ) -> ( success: Bool, source: AvModelSource );
	updateDxgiTextureForApps @3 
	( 
		appNames: List( Text ), 
		sharedTextureInfo: AvSharedTextureInfo 
	) -> ( success: Bool );
	pushPokerProximity @4 
	(
		pokerId : UInt64,
		proximity: List( AvPanelProximity )
	) -> ();
}

interface AvApp
{
	name @0 () -> ( name: Text );

	destroy @1 () -> ( success: Bool );

	updateSceneGraph @2 (root: AvNodeRoot ) -> ( success: Bool );
	pushMouseEvent @3 ( pokerNodeId: UInt32, event: AvPanelMouseEvent ) -> ();
}



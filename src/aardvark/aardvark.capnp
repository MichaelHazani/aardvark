@0x9a3e9fafc7daa5c7; # unique file ID generated by Cap'n Proto

interface AvServer
{
	createApp @0 ( name: Text ) -> ( app: AvApp );
	getNextVisualFrame @1 () -> ( frame: AvVisualFrame );
	getModelSource @2 ( uri: Text ) -> ( success: Bool, source: AvModelSource );
}

interface AvApp
{
	name @0 () -> ( name: Text );

	destroy @1 () -> ( success: Bool );

	updateSceneGraph @2 (root: AvNodeRoot ) -> ( success: Bool );
}


interface AvModelSource
{
	uri @0 () -> ( uri: Text );
	data @1 () -> ( data: Data );
}

struct AvVector
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
}

struct AvColor
{
	r @0 : Float32;
	g @1 : Float32;
	b @2 : Float32;
	a @3 : Float32;
}

struct AvQuaternion
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
	w @3 : Float32;
}

struct AvTransform
{
	position @0: AvVector;
	rotation @1: AvQuaternion;
	scale @2: AvVector;
}

struct AvModel
{
	transform @0: AvTransform;
	source @1: AvModelSource;
}

struct AvLight
{
	transform @0: AvTransform;
	diffuse @1: AvColor;
}

struct AvVisualFrame
{
	id @0: UInt64;
	roots @1: List( AvNodeRoot );
}

struct AvNode
{
	enum Type
	{
		invalid @0;			# something is broken about this node

		container @1;		# has no properties. Just contains other nodes
		origin @2;			# Sets the origin path
		transform @3;		# Contains a transform
		model @4;			# Contains a model URI
	}

	id @0: UInt32;
	name @1: Text;
	children @2: List(UInt32);
	type @3: Type = invalid;
	flags @4: UInt32 = 0;

	# These properties are allowed for a subset of node types
	propOrigin @5: Text;			# origin
	propTransform @6: AvTransform;	# transform
	propModelUri @7: Text;			# model
}

struct AvNodeWrapper
{
	node @0 : AvNode;
}

struct AvNodeRoot
{
	nodes @0 : List( AvNodeWrapper );
	sourceId @1 : UInt32;
}
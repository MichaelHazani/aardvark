@0x9a3e9fafc7daa5c7; # unique file ID generated by Cap'n Proto

interface AvServer
{
	createApp @0 ( name: Text ) -> ( app: AvApp );
	getNextVisualFrame @1 () -> ( frame: AvVisualFrame );
	getModelSource @2 ( uri: Text ) -> ( success: Bool, source: AvModelSource );
}

interface AvApp
{
	name @0 () -> ( name: Text );

	destroy @1 () -> ( success: Bool );

	createGadget @2 ( name: Text ) -> ( gadget: AvGadget );
}


interface AvGadget
{
	name @0 () -> ( name: Text );
	destroy @1 () -> ( success: Bool );

	setTransform @2 ( transform: AvTransform, parentPath : Text ) -> ( success: Bool );
	getTransform @3 () -> ( transform: AvTransform, parentPath : Text );

	createModelInstance @4 ( uri : Text) -> ( model: AvModelInstance );
	models @5 () -> ( models: List( AvModelInstance ) );
}

interface AvModelInstance
{
	source @0 () -> ( source : AvModelSource );
	destroy @1 () -> ( success: Bool );

	setTransform @2 ( transform: AvTransform, parentPath : Text ) -> ( success: Bool );
	getTransform @3 () -> ( transform: AvTransform, parentPath : Text );
}


interface AvModelSource
{
	uri @0 () -> ( uri: Text );
	data @1 () -> ( data: Data );
}

struct AvVector
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
}

struct AvColor
{
	r @0 : Float32;
	g @1 : Float32;
	b @2 : Float32;
	a @3 : Float32;
}

struct AvQuaternion
{
	x @0 : Float32;
	y @1 : Float32;
	z @2 : Float32;
	w @3 : Float32;
}

struct AvTransform
{
	position @0: AvVector;
	rotation @1: AvQuaternion;
	scale @2: AvVector;
}

struct AvModel
{
	transform @0: AvTransform;
	source @1: AvModelSource;
}

struct AvLight
{
	transform @0: AvTransform;
	diffuse @1: AvColor;
}

struct AvVisualGadget
{
	transform @0: AvTransform;
	models @1: List( AvModel );
	lights @2: List( AvLight );
}

struct AvVisualFrame
{
	id @0: UInt64;
	gadgets @1: List( AvVisualGadget );
}
